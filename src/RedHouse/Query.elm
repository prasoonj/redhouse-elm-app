-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module RedHouse.Query exposing (ItemRequiredArguments, ItemsOptionalArguments, item, items)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import RedHouse.InputObject
import RedHouse.Interface
import RedHouse.Object
import RedHouse.Scalar
import RedHouse.ScalarCodecs
import RedHouse.Union


type alias ItemRequiredArguments =
    { id : String }


{-|

  - id - id of the character

-}
item : ItemRequiredArguments -> SelectionSet decodesTo RedHouse.Object.Item -> SelectionSet (Maybe decodesTo) RootQuery
item requiredArgs object_ =
    Object.selectionForCompositeField "item" [ Argument.required "id" requiredArgs.id Encode.string ] object_ (identity >> Decode.nullable)


type alias ItemsOptionalArguments =
    { limit : OptionalArgument Int
    , offset : OptionalArgument Int
    }


items : (ItemsOptionalArguments -> ItemsOptionalArguments) -> SelectionSet decodesTo RedHouse.Object.Item -> SelectionSet (List decodesTo) RootQuery
items fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { limit = Absent, offset = Absent }

        optionalArgs =
            [ Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "items" optionalArgs object_ (identity >> Decode.list)
